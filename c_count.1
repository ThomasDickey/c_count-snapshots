.\" $Id: c_count.1,v 5.2 1991/10/21 17:13:15 dickey Exp $
.de DS
.RS
.nf
.sp
..
.de DE
.fi
.RE
.sp .5
..
.TH LINCNT 1
.SH NAME
.PP
\fBlincnt\fR \- C-language line counter
.SH USAGE
.PP
\fBlincnt\fI [options] [file-specifications]
.SH SYNOPSIS
.PP
\fBLincnt\fR counts lines and statements in C-language source files.
It provides related statistics on the amount of whitespace, comments
and code.
\fBLincnt\fR also shows the presence of unbalanced (or
nested) comments, unbalanced '\fB"\fR' marks and illegal characters.
.SH DESCRIPTION
.PP
\fBLincnt\fR reads one or more C-language source files and displays
simple statistics about them.
It counts statements (i.e., sequences
of tokens terminated with '\fB;\fR') and measures the relative
amount of commentary.
Semicolons are ignored where they appear in
comments or in quoted literals.
.PP
A count of semicolons is a reasonable way of counting C statements.
Note, however, that it does not count preprocessor definitions as
C statements.
.PP
The statistics summary shows you the relative amount of commentary.
This is the ratio of the alphanumeric characters in comments to the
total of characters in the code (ignoring tabs and other whitespace
which are not inside quotes).
Only alphanumeric characters are measured,
since asterisks and other punctuation are often used as fillers.
RCS and DEC/CMS history comments are also suppressed from this ratio.
.PP
\fBLincnt\fR counts the number of tokens (names and constants)
in the source files, and gives this total, as well as their average length.
.PP
\fBLincnt\fR provides you not only with measurements, but also
diagnostics in the form of a set of flags shown next to each file name:
.TP
.ft B
"
is shown next to files which contain an unbalanced
quote (\fB"\fR).
.TP
.B \?
is shown next to files containing illegal characters
(e.g., non-printing, non-whitespace characters such as an escape).
Non-printing characters (e.g., tabs) inside quotes are treated as
illegal characters.
.TP
.B *
is shown next to files containing unterminated or nested comments.
.PP
Unbalanced quotes may be legal.
The C preprocessor permits you to
define symbols which contain an unbalanced quote mark, e.g.,
.DS
#define	WARN	(void)printf("** warning:
	...
	WARN item \"%s\" not found\n", token);
.DE
.PP
Rather than duplicate all of the complexity of the C preprocessor,
\fBlincnt\fR permits you to specify symbols which contain
unbalanced quote marks.
.SH OPTIONS
.TP
.B \-c
display character-level statistics
.TP
.B \-d
The debug shows each token as it is parsed from the input stream.
.TP
.B \-i
display identifier-level statistics
.TP
.B \-j
annotate summary in technical format (i.e., "physical
source statements" and "logical source statements" for "lines"
and "statements", respectively).
.TP
.B \-l
display line-level statistics
.TP
.BI \-o file
specify a file to which the report is written.
The report is normally written to the standard output.
.TP
.B \-p
display statistics on a per-file basis
.TP
.BI \-q define
This option defines tokens which may
evaluate with an unbalanced quote mark '\fB"\fR'.
For example,
"-\fBq\ \fRWARN".
.TP
.B \-s
display specialized statistics (e.g., code:comment ratio)
.TP
.B \-t
generate output in spreadsheet format (e.g., comma-separated columns).
If any of the options "-\fBc\fR", "-\fBi\fR",
"-\fBl\fR" or "-\fBs\fR" is set, these statistics are generated.
Otherwise only the lines/statements are generated.
.TP
.B \-v
The verbose option directs \fBlincnt\fR not only
to print a summary line for each file, but also to print a running
summary, showing each source line, together with the current line
and statement numbers, as well as the cumulative flags.
.SH OPERATIONS
.PP
\fBLincnt\fR reads one or more C language source files and writes
its statistics to standard output.
If no file names are given,
\fBlincnt\fR reads a list of file names from standard input.
.PP
The special filename "-" directs \fBlincnt\fR to read the file
itself from the standard input.
.PP
An example of the use of \fBlincnt\fR is shown below, showing
the detailed types of information which it reports.
.DS
bsd(5) lincnt */*.[ch]
   927   352   |src/lincnt.c
     5     0?" |test/test1.c
     6     2?  |test/test2.c
    20     1   |test/test3.c
----------------
   958   355?"  total lines/statements

   121	lines had comments        12.6 %
    48	lines had history          5.0 %
    36	comments are inline       -3.8 %
    73	lines were blank           7.6 %
    22	lines for preprocessor     2.3 %
   730	lines containing code     76.2 %
   958	total lines              100.0 %

  3475	comment-chars             15.7 %
  1021	history-chars              4.6 %
  1003	nontext-comment-chars      4.5 %
  4731	whitespace-chars          21.3 %
   322	preprocessor-chars         1.5 %
 11644	statement-chars           52.5 %
 22196	total characters         100.0 %

  1541	tokens, average length 4.91

  0.29	ratio of comment:code
     3	?:illegal characters found
     2	":lines with unterminated quotes
.DE
.PP
If the "-\fBp\fR" option were used, the detailed information
would be printed for each file, as well as for all files together.
.SH ENVIRONMENT
.PP
\fBLincnt\fR runs in a portable UNIX\*R environment.
On VAX/VMS, it is executed as a foreign command.
.SH FILES
.PP
\fBLincnt\fR is a single binary module, which uses no auxiliary
files (e.g., \fBLINCNT.EXE\fR on VAX/VMS).
.SH ANTICIPATED CHANGES
.PP
None.
.SH SEE ALSO
.PP
wc\ (1).
.SH AUTHOR
.PP
Thomas Dickey (Software Productivity Consortium).
